#!/usr/bin/env python
#coding=utf-8

import struct
import os
import re
import sys
import time
import socket
import StringIO
import gzip
import getopt

#sys.argv = ["", "-vv", "test.pcap"];

def readline(content, idx=0):
    end = content.find('\n', idx)
    if end < 0:
        return (-1, None)
    else:
        return (end+1, content[idx:end])

def getheadervalue(header):
    header = header.strip()
    idx = header.find(':')
    if idx < 0:
        return ''
    else:
        return header[idx+1:].strip()

def ishttprequest(body):
    return body.startswith('GET') or body.startswith('POST') or body.startswith('PUT') \
                        or body.startswith('DELETE');
def ishttpresponse(body):
    return body.startswith('HTTP')

def parse_content_type(content_type):
    idx = content_type.find(';')
    if idx < 0:
        idx = len(content_type)
    mime = content_type[0:idx]
    encoding = content_type[idx+1:]
    if len(encoding) > 0:
        eidx = encoding.find('=')
        if eidx > 0:
            encoding = encoding[eidx+1:]
        else:
            encoding = ''
    return (mime.strip().lower(), encoding.strip().lower())

def istextbody(mime):
    return mime.find('text') >=0 or mime.find('html')>=0 or mime.find('json')>=0 \
            or mime.find('java') >=0

def ungzip(content):
    """ungip content"""
    compresssteam = StringIO.StringIO(content)
    gzipper = gzip.GzipFile(fileobj=compresssteam)     
    content = gzipper.read()
    return content

def decode_body(content, charset):
    if charset is not None and charset != '':
        return content.decode(charset).encode('utf-8')
    else:
        # todo: encoding detect
        return content

def read_chunked_body(content, pos):
    """读取chunked编码的http包体"""
    result = ''
    while True:
        (pos, cline) = readline(content, pos)
        chunk_size_end = cline.find(';')
        if chunk_size_end < 0:
            chunk_size_end = len(cline) 
        # skip chunk extension
        chunk_size_str = cline[0:chunk_size_end]
        # the last chunk
        if chunk_size_str[0] == '0':
            # chunk footer header
            # todo: now just skip it
            while True:
                (pos, cline) = readline(content, pos)
                if  cline is None or len(cline.strip()) == 0:
                    break
            return pos, result
        # chunk size
        chunk_len = int(cline, 16)
        result += content[pos:pos+chunk_len]
        pos += chunk_len
        if pos > len(content):
            # 看起来我们有一个不完整的chunked response或者发生了别的什么..
            # 直接略过整个body
            pos = len(content)
            return pos, result
        # a CRLF to end this chunked response
        (pos, nothing) = readline(content, pos)

def read_request(body, pos, level, encoding):
    content_len = 0
    transfer_encoding = ''
    content_encoding = ''
    isgzip = False
    ischunked = False
    while True:
        (pos, line) = readline(body, pos);
        if level >= 1:
            print line
        if line.startswith('Content-Length:'):
            content_len = int(getheadervalue(line))
        elif line.startswith('Transfer-Encoding'):
            transfer_encoding = getheadervalue(line)
            if transfer_encoding == 'chunked':
                ischunked = True
        elif line.startswith('Content-Encoding'):
            content_encoding = getheadervalue(line)
            if content_encoding.find('gzip') >= 0:
                isgzip = True
        # end of header
        elif len(line.strip()) == 0:
            break
    # deal with body
    if not ischunked:
        content = body[pos:pos+content_len]
        # print content
        pos += content_len
    else:
        (pos, content) = read_chunked_body(body,pos)
    if isgzip:
        content = ungzip(content)
    # TODO:if it is form url encode
    if True:
        if level>=2:
            #print "\n", #decode_body(content, charset)
            pass
    else:
        if level>=3:
            #print "\n", #decode_body(content, charset)
            pass
    return pos, content

def read_response(body, pos, level, encoding):
    content_type = ''
    content_len = 0
    host = ''
    transfer_encoding = ''
    content_encoding = ''
    isgzip = False
    ischunked = False
    while True:
        (pos, line) = readline(body, pos);
        if level >= 1:
            print line
        if line.startswith('Content-Type'):
            content_type = getheadervalue(line)
        elif line.startswith('Content-Length:'):
            content_len = int(getheadervalue(line))
        elif line.startswith('Host:'):
            host = getheadervalue(line)
        elif line.startswith('Transfer-Encoding'):
            transfer_encoding = getheadervalue(line)
            if transfer_encoding == 'chunked':
                ischunked = True
        elif line.startswith('Content-Encoding'):
            content_encoding = getheadervalue(line)
            if content_encoding.find('gzip') >= 0:
                isgzip = True
        # end of header
        elif len(line.strip()) == 0:
            break
    mime, charset = parse_content_type(content_type)
    if len(encoding) > 0 and charset == '':
        charset = encoding
    # deal with body
    if not ischunked:
        content = body[pos:pos+content_len]
        # print content
        pos += content_len
    else:
        (pos, content) = read_chunked_body(body,pos)
    if isgzip:
        content = ungzip(content)
    # TODO: get charset from header, or cmd args
    if istextbody(mime):
        if level >= 2:
            print decode_body(content, charset)
    else:
        if level >= 3:
            print decode_body(content, charset)
    return pos, content

class http_conn:
    """本地端口、远程IP、远程端口都相同的一组request-response, 
    属于同一个http连接"""
    def __init__(self, source_ip, source_port, dest_ip, dest_port, body):
        self.source_ip = source_ip
        self.source_port = source_port
        self.dest_ip = dest_ip
        self.dest_port = dest_port
        if cmp(source_ip, dest_ip) < 0:
            self.data = "%s %d %s %d" % (source_ip, source_port, dest_ip, dest_port)
        else:
            self.data = "%s %d %s %d" % (dest_ip, dest_port, source_ip, source_port)
        self.body = body
    def __eq__(self, another):
        return type(self) == type(another) and self.data == another.data
    def __hash__(self):
        return hash(self.data)
    def append(self, another):
        self.body += another.body
    def parse(self, level, encoding):
        pos = 0
        (pos_tmp, line) = readline(self.body, pos);
        while pos_tmp > 0:
            if ishttprequest(line):
                if level == 0:
                    print "\t", line
                (pos, ignore) = read_request(self.body, pos, level, encoding)
            #elif line.strip().startswith('HTTP'):
            elif ishttpresponse(line):
                (pos, ignore) = read_response(self.body, pos, level, encoding)
            else:
                if level >= 3:
                    print "unknow:", line
                pos = pos_tmp
            (pos_tmp, line) = readline(self.body, pos);

endian = '@'
def pcap_check(infile):

    global_head = infile.read(24)
    if not global_head:
        return global_head      

    (magic_num,) = struct.unpack('<I', global_head[0:4])
    # 根据此判断大小端
    if magic_num == 0xA1B2C3D4:
        endian = '<'
    elif magic_num == 0x4D3C2B1A:
        endian = '>'
    else:
        print "not pcap format."
        return False
    (version_major,version_minor,timezone,timestamp,max_package_len,linklayer)  \
            = struct.unpack(endian + '4xHHIIII', global_head)

    #print "major version:", version_major
    #print "minor version:", version_minor
    #print "max packet length:", max_package_len
    #print "linklayer type:", 
    if linklayer == 1:
        #print "Ethernet"
        return True
    elif linklayer == 6:
        print "TOKEN RING"
    elif linklayer == 10:
        print "FDDI"
    elif linklayer == 0:
        print "loop back"
    else:
        print linklayer

    return False

def check_body_empty(body):
    """检查包体是否全是0"""
    for c in body:
        if c != '\0':
            return False
    return True

def process_pcap_package(infile):

    package_header = infile.read(16)
    if not package_header:
        return -1

    (seconds,suseconds,package_len,rawlen) = struct.unpack(endian + 'IIII', package_header)

    
    ethernet_header = infile.read(14)
    (n_protocol, ) = struct.unpack('!12xH', ethernet_header)
    # not ip
    if n_protocol != 2048:
        return 1

    ip_header = infile.read(20)
    (f,ip_length,protocol) = struct.unpack('!BxH5xB10x', ip_header)
    ip_header_len = (f & 0xF) * 4;
    ip_version = (f>>4) & 0xF
    # not tcp.
    if protocol != 6:
        return 1
    source = socket.inet_ntoa(ip_header[12:16])
    dest = socket.inet_ntoa(ip_header[16:])
    if ip_header_len > 20:
        infile.read(ip_header_len - 20)

    tcp_header = infile.read(20)
    (source_port, dest_port, seq, ack, t_f, flags) = struct.unpack('!HHIIB6xB', tcp_header)
    tcp_header_len = ((t_f>>4) & 0xF) * 4
    if tcp_header_len > 20:
        infile.read(tcp_header_len - 20)
    syn = (flags>>1) & 1
    fin = flags &1
    body = infile.read(package_len - 14 - ip_header_len - tcp_header_len)
    if check_body_empty(body):
        body = ''
    return (source, source_port, dest, dest_port, seconds, body)

def print_help():
    print "help"

def compare_socket(ip, port, para):
    if para == '':
        return True
    idx = para.find(':')
    if idx == -1:
        return False
    pip = para[0:idx]
    pport = para[idx+1:]
    if pip != '' and pip != ip:
        return False
    if pport !='' and int(pport) != port:
        return False
    return True

def main():
    psource = ''
    pdest = ''
    show_level = 0
    encoding = ''
    opts, args = getopt.getopt(sys.argv[1:],'hvs:t:e:')
    filepath = args[0]
    for opt in opts:
        if opt[0] == '-v':
            show_level += 1
        elif opt[0] == '-h':
            print_help()
            return
        elif opt[0] == '-s':
            psource = opt[1]
        elif opt[0] == '-t':
            pdest = opt[1]
        elif opt[0] == '-e':
            encoding = opt[1]
            
    with open(filepath) as pcap_file:
        flag = pcap_check(pcap_file)
        if not flag:
            return
        conns = []
        while True:
            result = process_pcap_package(pcap_file)
            # end of file
            if result == -1:
                break
            # not tcp package
            if result == 1:
                continue
            (source, source_port, dest, dest_port, seconds, body) = result
            conn = http_conn(source, source_port, dest, dest_port, body)
            # 属于已有的连接
            if conn in conns:
                # TODO:这里很傻..
                idx = conns.index(conn)
                conns[idx].append(conn)
            elif ishttprequest(body):
                conns.append(conn)
            elif ishttpresponse(body):
                conn = http_conn(dest, dest_port, source, source_port, body)
                conns.append(conn)
                

        for conn in conns:
            if not compare_socket(conn.source_ip, conn.source_port, psource):
                continue
            if not compare_socket(conn.dest_ip, conn.dest_port, pdest):
                continue
            print "\n", "-"*20, conn.source_ip, conn.source_port, "===>", conn.dest_ip, conn.dest_port, "-"*20
            conn.parse(show_level, encoding)

if __name__ == "__main__":
    main()
