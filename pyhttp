#!/usr/bin/env python
#coding=utf-8

import StringIO
import getopt
import gzip
import socket
import struct
import sys
from collections import OrderedDict

def print_json(text):
    if text is None:
        return
    if len(text) > 50000:
        # do not process to large text
        return False
    if text.startswith('{') and text.endswith('}') or text.startswith('{') and text.endswith('}'):
        import json
        # do not process a non-list-dict json
        try:
            data = json.loads(text)
            print json.dumps(data, indent = 2, ensure_ascii = False, separators = (',', ': ')).encode('utf-8')
            return True
        except Exception, e:
            return False
    else:
        return False

class PacReader(object):
    """
    wrap pac data for read.
    """
    def __init__(self, data):
        self.data = data
        self.pos = 0
        self.length = len(self.data)

    def readline(self):
        """read line from input data"""
        if self.pos >= self.length:
            return None
        end = self.data.find('\n', self.pos)
        if end < 0:
            end = len(content)
        begin = self.pos
        self.pos = end + 1
        return self.data[begin:end]

    def fetchline(self):
        """fetch a line ,but not modify pos"""
        if self.pos >= self.length:
            return None
        end = self.data.find('\n', self.pos)
        if end < 0:
            end = len(content)
        return self.data[self.pos:end]

    def read(self, size):
        if self.pos >= self.length:
            return None
        end = self.pos + size
        if end < 0:
            end = len(content)
        begin = self.pos
        self.pos = end
        return self.data[begin:end]

    def skip(self, size):
        self.pos = self.pos + size;

    def isend(self):
        return self.pos >= self.length

    def remains(self):
        return self.length - self.pos

class HttpRequestHeader(object):
    """
    represent http readers.
    """
    def __init__(self):
        self.content_len = 0
        self.method = ''
        self.host = ''
        self.uri = ''
        self.transfer_encoding = ''
        self.content_encoding = ''
        self.content_type = ''
        self.gzip = False
        self.chunked = False
        self.host = ''
        self.request = ''

class HttpReponseHeader(object):
    """
    represent http readers.
    """
    def __init__(self):
        self.content_len = 0
        self.status_code = ''
        self.transfer_encoding = ''
        self.content_encoding = ''
        self.content_type = ''
        self.gzip = False
        self.chunked = False
        self.host = ''
        self.request = ''
        self.connectionclose = False


class GzipUtils(object):
    @staticmethod
    def isgzip(content):
        """
        test if content is gzipped by magic num.
        """
        if len(content) > 3 and ord(content[0:1]) == 31 and ord(content[1:2]) == 139 and ord(content[2:3]) == 8:
            return True
        return False

    @staticmethod
    def ungzip(content):
        """ungip content"""
        try:
            compresssteam = StringIO.StringIO(content)
            gzipper = gzip.GzipFile(fileobj = compresssteam)
            content = gzipper.read()
            return content
        except:
            return content

class HttpUtils(object):
    """
    utils methods for processing http packages
    """

    @staticmethod
    def parseheader(header):
        header = header.strip()
        idx = header.find(':')
        if idx < 0:
            return None, None
        else:
            return header[0:idx].strip(), header[idx+1:].strip()

    @staticmethod
    def ishttprequest(body):
        idx = body.find(' ')
        if idx < 0:
            return False
        method = body[0:idx].lower()
        return method in ('get', 'post', 'put', 'delete')

    @staticmethod
    def ishttpresponse(body):
        return body.startswith('HTTP/') or body.startswith('http/')

    @staticmethod
    def parse_content_type(content_type):
        idx = content_type.find(';')
        if idx < 0:
            idx = len(content_type)
        mime = content_type[0:idx]
        encoding = content_type[idx+1:]
        if len(encoding) > 0:
            eidx = encoding.find('=')
            if eidx > 0:
                encoding = encoding[eidx+1:]
            else:
                encoding = ''
        return mime.strip().lower(), encoding.strip().lower()

    @staticmethod
    def istextbody(mime):
        return 'text' in mime or 'html' in mime or 'json' in mime or 'java' in mime

    @staticmethod
    def readHeaders(pacReader, level):
        line = pacReader.fetchline()
        if HttpUtils.ishttprequest(line):
            headers = HttpRequestHeader()
            items = line.split(' ')
            if len(items) == 3:
                headers.method = items[0]
                headers.uri = items[1]
            pacReader.readline()
            if level >=1 :
                print line
        elif HttpUtils.ishttpresponse(line):
            headers = HttpReponseHeader()
            pacReader.readline()
            if level >=1 :
                print line
        else:
            return None

        while True:
            line = pacReader.readline()
            if line is None or len(line.strip()) == 0:
                if level >= 1:
                    print ''
                return headers

            if level >= 1:
                print line

            key, value = HttpUtils.parseheader(line)
            if key is None:
                #TODO: incorrect headers.
                continue
            key = key.lower()
            if key == "content-length":
                headers.content_len = int(value)
            elif key == 'transfer-encoding' and value == 'chunked':
                    headers.chunked = True
            elif key == 'content-type':
                headers.content_type = value;
            elif key == 'content-encoding' and 'gzip' in value:
                headers.gzip = True
            elif key == 'host':
                headers.host = value
            elif key == 'connectoin' and value == 'close':
                headers.connectionclose = True

    @staticmethod
    def decode_body(content, charset):
        if charset is not None and charset != '':
            try:
                return content.decode(charset).encode('utf-8')
            except:
                return content
        else:
            # todo: encoding detect
            try:
                return content.decode('utf-8').encode('utf-8')
            except:
                pass
            try:
                return content.decode('gb18030').encode('utf-8')
            except:
                pass
            return content

    @staticmethod
    def read_chunked_body(pacReader, skip=False):
        """
        read chunked body.
        """
        result = []
        while True:
            cline = pacReader.readline()
            if cline is None:
                return None
            chunk_size_end = cline.find(';')
            if chunk_size_end < 0:
                chunk_size_end = len(cline)
            # skip chunk extension
            chunk_size_str = cline[0:chunk_size_end]
            # the last chunk
            if chunk_size_str[0] == '0':
                # chunk footer header
                # todo: handle additional http headers.
                while True:
                    cline = pacReader.readline()
                    if  cline is None or len(cline.strip()) == 0:
                        break
                return ''.join(result)
            # chunk size
            chunk_size_str = chunk_size_str.strip()
            try:
                chunk_len = int(chunk_size_str, 16)
            except:
                return ''.join(result)

            result.append(pacReader.read(chunk_len))
            if pacReader.isend():
                # skip all
                return pos, ''.join(result)
            # a CRLF to end this chunked response
            pacReader.readline()


def read_request(request_pacs, level, encoding):
    """
    read and output one http request.
    """
    request_pacs.sort(key = lambda x: x.seq)
    #TODO: handle with tcp retransmission
    body = ''.join([p.body for p in request_pacs])
    pacReader = PacReader(body)
    headers = HttpUtils.readHeaders(pacReader, level)
    
    # print request info
    if level == 0:
        if not headers.host.startswith('http://'):
            request =  headers.method + ' http://' + headers.host + headers.uri
        else:
            request = headers.method + ' ' + headers.uri
        print request

    output_body = False
    if level >= 3:
        output_body = True
    elif level >= 2 and 'www-form-urlencoded' in headers.content_type > 0:
        output_body = True

    content = ''
    # deal with body
    if not headers.chunked:
        if output_body:
            content = pacReader.read(headers.content_len)
        else:
            pacReader.skip(headers.content_len)
    else:
        content = HttpUtils.read_chunked_body(pacReader)

    if not headers.gzip:
        # if is gzip by content magic header
        # someone missed the content-encoding header
        headers.gzip = GzipUtils.isgzip(content)

    if output_body and headers.gzip:
        content = GzipUtils.ungzip(content)
    # if it is form url encode
    if output_body:
        if content is not None:
            print content
        print ''


def read_response(response_pacs, level, encoding):
    """
    read and output one http response
    """
    response_pacs.sort(key = lambda x: x.seq)
    body = ''.join([p.body for p in response_pacs])
   
    pacReader = PacReader(body)
    headers = HttpUtils.readHeaders(pacReader,level)

    # read body
    mime, charset = HttpUtils.parse_content_type(headers.content_type)
    if len(encoding) > 0 and charset == '':
        charset = encoding

    output_body = False
    if level >= 3:
        output_body = True
    elif level >= 2 and HttpUtils.istextbody(mime) > 0:
        output_body = True

    content = ''
    # deal with body
    if not headers.chunked:
        if headers.content_len == 0:
            if headers.connectionclose:
                # we can't get content length, so asume it till the end of data.
                headers.content_len = pacReader.remains()
            else:
                #TODO: we can't get content length, and is not a chunked body.
                pass
        if output_body:
            content = pacReader.read(headers.content_len)
    else:
        content = HttpUtils.read_chunked_body(pacReader)
    if headers.gzip and output_body:
        content = GzipUtils.ungzip(content)
    if output_body:
        content = HttpUtils.decode_body(content, charset)
        if not print_json(content):
            if content is not None:
                print content


class TcpPack:
    """
    represent a tcp package.
    """
    def __init__(self, source, source_port, dest, dest_port, pac_type, seq, ack, body):
        self.source = source
        self.source_port = source_port
        self.dest = dest
        self.dest_port = dest_port
        self.pac_type = pac_type
        self.seq = seq
        self.ack = ack
        self.body = body
        self.direction = 0

    def __str__(self):
        return "%s:%d  -->  %s:%d, type:%d, seq:%d, ack:%s size:%d" % \
               (self.source, self.source_port, self.dest, self.dest_port, self.pac_type, self.seq,
                self.ack, len(self.body))

    def gen_key(self):
        skey = self.source + ':' + str(self.source_port)
        dkey = self.dest + ':' + str(self.dest_port)
        if cmp(skey, dkey) < 0:
            key = skey + '-' + dkey
        else:
            key = dkey + '-' + skey
        return key


class HttpConn:
    """
    all data having same source/dest ip/port.
    """

    def __init__(self, tcp_pac):
        self.source_ip = tcp_pac.source
        self.source_port = tcp_pac.source_port
        self.dest_ip = tcp_pac.dest
        self.dest_port = tcp_pac.dest_port
        self.pac_list = []
        if len(tcp_pac.body) > 0:
            self.pac_list.append(tcp_pac)
        self.status = 0

    def append(self, tcp_pac):
        if len(tcp_pac.body) == 0:
            return
        if self.status == -1 or self.status == 2:
            # not http conn or conn already closed.
            return
        if tcp_pac.source != self.source_ip:
            tcp_pac.direction = 1

        self.pac_list.append(tcp_pac)

        if self.status == 0:
            if tcp_pac.body != '':
                if HttpUtils.ishttprequest(tcp_pac.body):
                    self.status = 1
        if tcp_pac.pac_type == -1:
            # end of connection
            if self.status == 1:
                self.status = 2
            else:
                self.status = -2

    def output(self, level, encoding):
        if self.status <= -1:
            return
        elif self.status == 0:
            return
        elif self.status == 1:
            pass
        elif self.status == 2:
            pass
        print self.source_ip, ':', self.source_port, "--- -- - >", self.dest_ip, ':', self.dest_port

        request_pacs = []
        response_pacs = []
        state = 0
        for pac in self.pac_list:
            if len(pac.body) == 0:
                continue
            if state == 0:
                if pac.direction == 1:
                    read_request(request_pacs, level, encoding)
                    state = 1
                    response_pacs.append(pac)
                    del request_pacs[:]
                else:
                    request_pacs.append(pac)
            else:
                if pac.direction == 0:
                    read_response(response_pacs, level, encoding)
                    state = 0
                    request_pacs.append(pac)
                    del response_pacs[:]
                else:
                    response_pacs.append(pac)
        #endfor
        if len(request_pacs) > 0:
            read_request(request_pacs, level, encoding)
        if len(response_pacs) > 0:
            read_response(response_pacs, level, encoding)

        print ''


def pcap_check(infile):
    """check the header of cap file.
    """

    endian = '@'
    # read 24 bytes header
    global_head = infile.read(24)
    if not global_head:
        return False, endian

    (magic_num,) = struct.unpack('<I', global_head[0:4])
    # judge the endian of file.
    if magic_num == 0xA1B2C3D4:
        endian = '<'
    elif magic_num == 0x4D3C2B1A:
        endian = '>'
    else:
        print "not pcap format."
        return False, endian
    (version_major, version_minor, timezone, timestamp, max_package_len, linklayer)  \
            = struct.unpack(endian + '4xHHIIII', global_head)

    # now only handle Ethernet package.
    if linklayer == 1:
        #print "Ethernet"
        return True, endian
    elif linklayer == 6:
        print "TOKEN RING"
    elif linklayer == 10:
        print "FDDI"
    elif linklayer == 0:
        print "loop back"
    else:
        print linklayer

    return False


def process_pcap_package(infile, endian):
    """ generator for process packages.
    """
    while True:
        # process one package

        # package header
        package_header = infile.read(16)
        # end of file.
        if not package_header:
            break

        (seconds, suseconds, package_len, rawlen) = struct.unpack(endian + 'IIII', package_header)
        # ethernet header
        ethernet_header = infile.read(14)
        (n_protocol, ) = struct.unpack('!12xH', ethernet_header)
        # not ip package
        if n_protocol != 2048:
            infile.seek(package_len - 14, 1)
            if n_protocol == 34525:
                # TODO: ipv6 package
                pass
            continue

        # ip header
        ip_header = infile.read(20)
        (f, ip_length, protocol) = struct.unpack('!BxH5xB10x', ip_header)
        ip_header_len = (f & 0xF) * 4;
        ip_version = (f >> 4) & 0xF
        # not tcp.
        if protocol != 6:
            infile.seek(package_len - 14 - 20, 1)
            continue
        source = socket.inet_ntoa(ip_header[12:16])
        dest = socket.inet_ntoa(ip_header[16:])
        if ip_header_len > 20:
            infile.seek(ip_header_len - 20, 1)

        # tcp header
        tcp_header = infile.read(20)
        (source_port, dest_port, seq, ack_seq, t_f, flags) = struct.unpack('!HHIIBB6x', tcp_header)
        tcp_header_len = ((t_f>>4) & 0xF) * 4
        # skip extension headers
        if tcp_header_len > 20:
            infile.read(tcp_header_len - 20)
        fin = flags & 1
        syn = (flags >> 1) & 1
        rst = (flags >> 2) & 1
        psh = (flags >> 3) & 1
        ack = (flags >> 4) & 1
        urg = (flags >> 5) & 1

        body_len = package_len - 14 - ip_header_len - tcp_header_len
        body_len2 = ip_length - ip_header_len - tcp_header_len
        # body
        body = infile.read(body_len2)

        if body_len > body_len2:
            # TODO: why 6bytes zero
            infile.seek(body_len - body_len2, 1)
        if syn == 1 and ack == 0:
            # init tcp connection
            pac_type = 1
        elif fin == 1:
            pac_type = -1
        else:
            pac_type = 0

        pack = TcpPack(source, source_port, dest, dest_port, pac_type, seq, ack_seq, body)
        yield pack
    #end while


def print_help():
    print """Usage: pyhttp [option] file
    Options:
    -v      : show request/response headers
    -vv     : show text request/response bodys
    -vvv    : show all request/response bodys
    -d      : debug output.show package infos
    -h      : show helps
    -p port : only parser tcp packages with port(dest or source)
    -i ip   : only parser tcp packages with ip(dest or source)
    -e encoding : specify encoding to decode http response. auto detect if not specified.
    """


def main():
    port = -1
    ip = ''
    show_level = 0
    encoding = ''
    debug = False
    opts, args = getopt.getopt(sys.argv[1:],'hvdp:i:e:')
    for opt in opts:
        if opt[0] == '-v':
            show_level += 1
        elif opt[0] == '-h':
            print_help()
            return
        elif opt[0] == '-p':
            port = int(opt[1])
        elif opt[0] == '-i':
            ip = opt[1]
        elif opt[0] == '-e':
            encoding = opt[1]
        elif opt[0] == '-d':
            debug = True
    #endfor

    filepath = args[0]

    with open(filepath) as pcap_file:
        flag, endian = pcap_check(pcap_file)
        if not flag:
            # not a valid pcap file or we cannot handle this file.
            return

        conn_dict = OrderedDict()
        for tcp_pac in process_pcap_package(pcap_file, endian):

            #filter
            if port != -1 and tcp_pac.source_port != port and tcp_pac.dest_port != port:
                continue
            if ip != '' and tcp_pac.source != ip and tcp_pac.dest != ip:
                continue
            if debug:
                print str(tcp_pac)

            key = tcp_pac.gen_key()
            # we already have this conn
            if key in conn_dict:
                conn_dict[key].append(tcp_pac)
                # conn closed.
                if tcp_pac.pac_type == -1:
                    conn_dict[key].output(show_level, encoding)
                    del conn_dict[key]

            # begin tcp connection.
            elif tcp_pac.pac_type == 1:
                conn_dict[key] = HttpConn(tcp_pac)
            elif tcp_pac.pac_type == 0:
                # tcp init before capature
                # if is a http request?
                if HttpUtils.ishttprequest(tcp_pac.body):
                    conn_dict[key] = HttpConn(tcp_pac)
            else:
                # ignore 
                pass
        #endfor
        for conn in conn_dict.values():
            conn.output(show_level, encoding)
    #endwhile


if __name__ == "__main__":
    main()
